1. Why do we need the static keyword in Java? Explain with an example.
Ans : 
   The "static" keyword in Java is used to create class-level variables and methods, which are shared among all instances of a class. It is not tied to a specific instance of the class but belongs to the class itself. This is useful for scenarios where a variable or method is common to all instances and doesn't need to be duplicated for each object.
   
   Example :

   public class Example {
       static int staticVariable = 10;
       
       static void staticMethod() {
           System.out.println("Static Method");
       }
   }
   "

   Here, "staticVariable" and "staticMethod" are associated with the class "Example", and you can access them without creating an instance of the class.

2. What is class loading, and how does the Java program actually execute?
Ans : 
   Class loading is the process of loading a class into memory. It involves three steps: Loading, Linking, and Initialization. When a Java program is executed, the Java Virtual Machine (JVM) loads the class files into memory and starts the execution.

   - Loading: Loading involves finding and importing the binary data for a class. It reads the class file, typically generated by the Java compiler, which contains bytecode.

   - Linking: Linking is the process of combining the class with the already loaded classes and interfaces. It consists of three sub-steps: Verification, Preparation, and Resolution.

   - Initialization: The final step involves executing the class's static initializers and the initialization of static variables.

3. Can we mark a local variable as static?
Ans : 
   No, you cannot mark a local variable as "static". The "static" keyword in Java is used for class-level members (variables and methods), not for local variables. Local variables are defined within a method or a block and are specific to the scope in which they are declared.

4. Why is the static block executed before the main method in Java?
Ans : 
   The "static" block in Java is used for static initialization of a class. It gets executed when the class is loaded into memory. Since the "main" method is static, it relies on static members, and therefore, the static block is executed before the "main" method during the class loading process.

5. Why is a static method also called a class method?
Ans : 
   A static method in Java is also referred to as a class method because it belongs to the class and not to a specific instance of the class. It can be invoked using the class name rather than an instance of the class, making it a method that is common to all instances.

6. What is the use of static blocks in Java?
Ans : 
   Static blocks in Java are used for static initialization of a class. They are executed when the class is loaded into memory. Static blocks are useful when you need to perform one-time initialization tasks for the class, such as loading resources, initializing static variables, or performing any other setup.

7. Difference between Static and Instance variables
Ans : 
   - Static Variables:
     - Belong to the class and are shared among all instances.
     - Declared using the "static" keyword.
     - Memory is allocated only once for static variables.
     - Can be accessed using the class name.

   - Instance Variables:
     - Belong to the instance of a class.
     - Declared without the "static" keyword.
     - Memory is allocated for each instance of the class.
     - Accessed using the object reference.

8. Difference between Static and Non-Static Members
Ans : 
   - Static Members:
     - Belong to the class and are shared among all instances.
     - Declared using the "static" keyword.
     - Can be accessed using the class name.
     - Can be invoked without creating an instance of the class.

   - Non-Static Members:
     - Belong to a specific instance of a class.
     - Declared without the "static" keyword.
     - Accessed using the object reference.
     - Requires an instance of the class for invocation.